<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on</title><link>https://data-illustrateur.github.io/tutorials/</link><description>Recent content in Tutorials on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Sat, 27 Aug 2022 18:07:54 -0400</lastBuildDate><atom:link href="https://data-illustrateur.github.io/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Prepare and Import Your Data</title><link>https://data-illustrateur.github.io/tutorials/data/</link><pubDate>Thu, 27 Aug 2020 19:23:18 +0200</pubDate><guid>https://data-illustrateur.github.io/tutorials/data/</guid><description>Data Illustrateur currently supports tabular data formatted as csv (comma-separated values) files, with the assumption that the first row contains the column names.
The same dataset can have a long format and a wide format. For example, Table 1 shows the 2012 Summer Olympic medal table dataset in the long form. Table 2 shows a wide form of the same dataset, where each of the medal type values (Gold, Silver, Bronze) is a column.</description></item><item><title>Collection &amp; Children Order</title><link>https://data-illustrateur.github.io/tutorials/groups/collection/</link><pubDate>Thu, 27 Aug 2020 19:23:18 +0200</pubDate><guid>https://data-illustrateur.github.io/tutorials/groups/collection/</guid><description>The repeat and divide actions generate a collection of shapes. You may think of a collection as a &amp;ldquo;group&amp;rdquo; of shapes, where all the shapes in a collection have the same type (e.g., rectangle, line, path) and represent values of the same categorical variable. Each shape in a collection represents a unique value of the categorical variable.
In Data Illustrateur, a selected collection is drawn with a green dashed border, as shown in the figure below.</description></item><item><title>Layout</title><link>https://data-illustrateur.github.io/tutorials/groups/layout/</link><pubDate>Thu, 27 Aug 2020 19:23:18 +0200</pubDate><guid>https://data-illustrateur.github.io/tutorials/groups/layout/</guid><description>Items in a collection can be positioned using a layout. Data Illustrateur provides the following layouts: grid, stack, pack, treemap, and none. You can change the layout applied to a collection through the control in the Property Inspector panel.
Grid Layout By default, shapes generated using the repeat operation are placed in a grid layout. Parameters of a grid layout include: number of rows, row gap, number of columns, column gap, horizontal &amp;amp; vertical gravity.</description></item><item><title>Nesting</title><link>https://data-illustrateur.github.io/tutorials/groups/nesting/</link><pubDate>Thu, 27 Aug 2020 19:23:18 +0200</pubDate><guid>https://data-illustrateur.github.io/tutorials/groups/nesting/</guid><description>Collections can be nested: the children of a collection do not have to be shaped, they can be collections as well. To create nested collections, we can apply the repeat operation on a collection, or apply the divide operation on shapes inside a collection.
Repeat a Collection In this example, we first create a collection of pies by dividing a circle. Then we can repeat the pie collection to form a nested collection.</description></item><item><title>Bind Data to Visual Property</title><link>https://data-illustrateur.github.io/tutorials/encode/bind/</link><pubDate>Thu, 27 Aug 2020 19:23:18 +0200</pubDate><guid>https://data-illustrateur.github.io/tutorials/encode/bind/</guid><description>By default, objects (i.e. shapes and collections) behave exactly like those found in a typical vector editor. You can move them around, change their size and color, or delete them by pressing the &amp;ldquo;delete&amp;rdquo; button. To create data visualizations, we can manually alter the visual properties of objects. But this process is laborious and error-prone. Data Illustrateur provides automated support for binding data to visual properties of shapes, vertices, segments and collections.</description></item><item><title>Axis</title><link>https://data-illustrateur.github.io/tutorials/encode/axis/</link><pubDate>Thu, 27 Aug 2020 19:23:18 +0200</pubDate><guid>https://data-illustrateur.github.io/tutorials/encode/axis/</guid><description>When a repeat action or a data binding action is performed, Data Illustrateur tries to automatically create an axis. An x-axis can be freely moved vertically, and a y-axis can be freely moved horizontally. You can also customize the following properties of an axis through the Property Inspector: whether to show axis path, whether to show axis ticks, whether to show axis title, axis orientation, stroke color, text color, position of axis path, tick offset, tick size, label offset, label format, and label rotation.</description></item><item><title>Vertex Position Encoding</title><link>https://data-illustrateur.github.io/tutorials/encode/vertex-pos/</link><pubDate>Thu, 27 Aug 2020 19:23:18 +0200</pubDate><guid>https://data-illustrateur.github.io/tutorials/encode/vertex-pos/</guid><description>A unique feature in Data Illustrateur is the ability to bind data to the properties of vertices and segments. This feature is useful for visualization designs that may be hard to describe using only shape properties. The behavior of data binding varies, depending on whether the vertices are drawn by hand, or generated by the densify action.
Vertices Drawn by Hand When you use the Line Tool or the Path Tool to draw a path, the vertices are drawn by hand.</description></item><item><title>Scale: Type, Aggregator, Reuse</title><link>https://data-illustrateur.github.io/tutorials/encode/scale/</link><pubDate>Thu, 27 Aug 2020 19:23:18 +0200</pubDate><guid>https://data-illustrateur.github.io/tutorials/encode/scale/</guid><description>Whenever a data binding action is performed, Data Illustrateur creates an underlying scale, which specifies how the data values of the variable are mapped to the values of the visual property. If the data variable is numerical, by default, Data Illustrateur chooses a linear scale type. In the example below, we perfom divide twice to create a basic Nightingale&amp;rsquo;s rose chart. We then bind the &amp;ldquo;Death&amp;rdquo; variable to the thickness of the arcs.</description></item><item><title>Color Scheme and Legend</title><link>https://data-illustrateur.github.io/tutorials/encode/legend/</link><pubDate>Thu, 27 Aug 2020 19:23:18 +0200</pubDate><guid>https://data-illustrateur.github.io/tutorials/encode/legend/</guid><description>When a data binding action is performed to encode a variable using fill color or stroke color, Data Illustrateur tries to automatically choose a color scheme and create a legend. You can freely move the legend around in the canvas.
If the variable is categorical, a categorical color scheme is chosen. You can edit the color mapping by clicking each color in the legend and choosing a desired color in the color picker.</description></item></channel></rss>